{"ast":null,"code":"var _jsxFileName = \"/home/mcenny/repos/Simple-React-Project/src/components/MemeGenerator/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport MemeData from \"./MemeData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  // const [memeUrl, setMemeUrl] = React.useState(\"http://i.imgflip.com/1bij.jpg\");\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState();\n  const allMemeImages = MemeData.data.memes;\n\n  function getMemeImage() {\n    const memeArray = allMemes;\n    const memeArrayIndex = Math.floor(Math.random() * memeArray.length);\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: allMemess[memeArrayIndex].url\n    }));\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevState => ({ ...prevState,\n      [name]: value\n    }));\n    console.log(meme);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-input-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"shut up\",\n          className: \"form--input\",\n          name: \"topText\",\n          value: meme.topText,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"and take my money\",\n          className: \"form--input\",\n          name: \"bottomText\",\n          value: meme.bottomText,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memeContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"memeText topText\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"memeText bottomText\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n} // {props.img}\n\n_s(Meme, \"IbtAM9/bDO/mvUxsI6n7IwGy8Fw=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/home/mcenny/repos/Simple-React-Project/src/components/MemeGenerator/Meme.js"],"names":["React","MemeData","Meme","useEffect","fetch","then","res","json","data","setAllMemes","memes","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","allMemeImages","getMemeImage","memeArray","memeArrayIndex","Math","floor","random","length","prevMeme","allMemess","url","handleChange","event","name","value","target","prevState","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MemeData from \"./MemeData\";\n\nexport default function Meme() {\n  // const [memeUrl, setMemeUrl] = React.useState(\"http://i.imgflip.com/1bij.jpg\");\n\n  React.useEffect(\n    () => {\n      fetch(\"https://api.imgflip.com/get_memes\")\n      .then(res => res.json())\n      .then(data => setAllMemes(data.data.memes))\n      \n    }, []\n  )\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\",\n  });\n\n  const [allMemes, setAllMemes] = React.useState()\n\n  const allMemeImages = MemeData.data.memes;\n\n  function getMemeImage() {\n    const memeArray = allMemes;\n    const memeArrayIndex = Math.floor(Math.random() * memeArray.length);\n    setMeme((prevMeme) => ({\n      ...prevMeme,\n      randomImage: allMemess[memeArrayIndex].url,\n    }));\n  }\n\n  function handleChange(event){\n    const {name, value} = event.target\n    setMeme(prevState => (\n     {...prevState, [name]: value}\n    ))\n    console.log(meme);\n  }\n\n  return (\n    <main>\n      <div className=\"form\">\n        <div className=\"form-input-field\">\n          <input\n          type=\"text\" \n          placeholder=\"shut up\" \n          className=\"form--input\" \n          name=\"topText\"\n          value={meme.topText}\n          onChange={handleChange}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"and take my money\"\n            className=\"form--input\"\n            name=\"bottomText\"\n            value={meme.bottomText}\n            onChange={handleChange}\n          />\n        </div>\n        <button className=\"form--button\" onClick={getMemeImage}>\n          Get a new meme image ðŸ–¼\n        </button>\n      </div>\n      <div className=\"memeContainer\">\n        <h2 className=\"memeText topText\">{meme.topText}</h2>\n      <img src={meme.randomImage} className=\"meme--image\" />\n      <h2 className=\"memeText bottomText\">{meme.bottomText}</h2>\n      </div>\n    </main>\n  );\n}\n\n// {props.img}\n"]},"metadata":{},"sourceType":"module"}